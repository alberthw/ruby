package serial

import (
	"encoding/hex"
	"log"
	"testing"
)

func TestSender(t *testing.T) {
	cases := []struct {
		in   string
		want string
	}{
		//		{"024646323131303020202020203020202952402020202020202020202020202020202020202020202020202020203337463003", ""},
		{"commands\r", "0d0a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d204d4f4e474f4f534520436f6d6d616e6473202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0d0a636f6d6d616e6473202d20446973706c61792061204c697374206f6620436f6d6d616e64730d0a7665722e676574202d20446973706c617920416c6c2073797374656d2c20736f66747761726520616e642068617264776172652076657273696f6e20696e666f0d0a736572766963652e6d6f6465202d20456e7465722073657276696365206d6f64650d0a736572766963652e6d656e75202d2053686f772073657276696365206d656e750d0a7375626d6f64652e65786974202d20457869742063757272656e742073657276696365207375626d6f64652e0d0a76696164632e7072696e74202d2073747265616d696e67206f7574205649204144432073616d706c696e670d0a746f702e6f6e202d2053657420746f70206f6e0d0a746f702e6f6666202d2053657420746f70206f66660d0a6c65642e6f6666202d205475726e206f6666204c45440d0a626565702e6f6e202d2042656570206f6e0d0a626565702e6f6666202d2042656570206f66660d0a696d6167652e75706c6f6164202d2055706c6f616420696d6167650d0a696d6167652e757064617465202d2055706461746520486f737420616e64204453500d0a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0d0a0d0a0a4d4f4e474f4f53453e"},
		//{"02464632303030304236394203", ""},
	}

	for _, c := range cases {
		Open("com4", 115200)
		defer Close()
		hex.DecodeString(c.in)
		output := Sender([]byte(c.in))
		log.Println(string(output))
		got := hex.EncodeToString(output)

		if got != c.want {
			t.Errorf("Sender()\nwant\t%s\ngot\t%s\n", c.want, got)
		}
	}
}
